<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.mytest.test</groupId>
        <artifactId>maven-practice</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>maven-assembly-plugin-practice</artifactId>

    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.mytest.test</groupId>
            <artifactId>maven-common-module</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
            <version>5.8.16</version>
        </dependency>
    </dependencies>

    <build>
        <!--maven-resources-plugin 插件打包resource文件时会参考此节点的配置-->
        <resources>
            <!-- 是否在jar包中保留配置文件，如果保留则添加此配置 -->
<!--            <resource>-->
<!--                &lt;!&ndash;开启filter功能，将路径中的属性名替换为对应的属性值&ndash;&gt;-->
<!--                <filtering>true</filtering>-->
<!--                <directory>src/main/resources</directory>-->
<!--                <includes>-->
<!--                    <include>**/application*.yml</include>-->
<!--                    <include>**/application*.yaml</include>-->
<!--                    <include>**/application*.properties</include>-->
<!--                </includes>-->
<!--            </resource>-->

            <resource>
                <directory>src/main/resources</directory>
                <excludes>
                    <exclude>application*.properties</exclude>
                    <exclude>application*.yml</exclude>
                    <exclude>db/**</exclude>
                </excludes>
            </resource>

            <!--compile 和 package 时都会使用resource节点的配置-->
            <!--resource 节点可通过配置将制定目录的文件在打包后拷贝到制定目录-->
            <!--如果只有这一个resource节点，或者如果把这个resource节点配置在最前面，则会直接把配置文件打包到conf目录classes目录下不会有配置文件，导致IDEA运行时找不到配置文件-->
            <resource>
                <directory>src/main/resources</directory>
                <targetPath>${project.build.directory}/conf</targetPath>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.2.0</version>
                <executions>
                    <execution>
                        <id>make-assembly</id> <!-- this is used for inheritance merges -->
                        <phase>package</phase> <!-- bind to the packaging phase -->
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <descriptors>
                        <descriptor>release.xml</descriptor>
                    </descriptors>
                    <!-- 指定最终的jar/压缩包名 -->
                    <finalName>test-${project.artifactId}</finalName>
                </configuration>
            </plugin>


<!--            <plugin>-->
<!--                &lt;!&ndash; 打fat-jar &ndash;&gt;-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-assembly-plugin</artifactId>-->
<!--                <version>3.2.0</version>-->
<!--                <configuration>-->
<!--                    <descriptorRefs>-->
<!--                        <descriptorRef>jar-with-dependencies</descriptorRef>-->
<!--                    </descriptorRefs>-->
<!--                </configuration>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <id>release-all</id>-->
<!--                        <phase>package</phase>-->
<!--                        <goals>-->
<!--                            <goal>single</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--            </plugin>-->
        </plugins>
    </build>

</project>